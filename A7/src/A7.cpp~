//============================================================================
// Name        : A7.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
using namespace std;
#define MAX 4

class Symbol{
	string name;
	string attribute;
	int chain;
    public:
	Symbol();
	Symbol(string,string);
	friend class Table;
};

Symbol::Symbol(){
	name="\0";
    attribute="\0";
    chain=-1;
}

class Table{
	Symbol table[MAX];
public:
	void insert_withoutreplacement(string key,string mean);
	void insert_withreplacement(string key,string mean);
	int hash_generator(string key);
	void display_Table();
};

int Table::hash_generator(string key){
	int sum=0;

	     for(int i=0;i<key.length();i++){
	    	 sum+=key[i];
	     }

	     int index=sum%MAX;

	     return index;
}

void Table::insert_withoutreplacement(string key,string mean){
	 int index=hash_generator(key);

     if((table[index].name).length()==0){
    	 table[index].name=key;
    	 table[index].attribute=mean;
    	 return;
     }

     else{                           //WITHOUT REPLACEMENT CONDITION
    	 int i,flag;
    	  for(i=index+1; ;i++){
    		  if(i==MAX){
    			  i=0;
    		  }
    		  if(i==index){
    			  flag=0;
    			  break;
    		  }
    		  if((table[i].name).length()==0){
    			  flag=1;
    			  break;
    		  }
    	  }
    	  if(flag==1){
    		  int f=index;
    		  while(table[f].chain!=-1){
    			  f=table[index].chain;
    		  }
    		  table[f].chain=i;
    		  table[i].name=key;
    		  table[i].attribute=mean;
    	  }
    	  else{
    		  cout<<endl;
    		  cout<<"HASH TABLE FULL!!"<<endl;
    	  }
     }
}

void Table::insert_withreplacement(string key,string mean){
	 int index=hash_generator(key);
	 if((h_table[index].keyword).length()==0){
	    	 h_table[index].keyword=key;
	    	 h_table[index].meaning=mean;
	    	 return;
	  }
	     else if(h_table[index].keyword!=key){              //REPLACEMENT CONDITION

	    	 if(index!=hash_generator(h_table[index].keyword)){
	    	 string tempkey=key;
	    	 string tempmean=mean;
	    	 key=h_table[index].keyword;
	    	 mean=h_table[index].meaning;
	    	 h_table[index].keyword=tempkey;
	    	 h_table[index].meaning=tempmean;
	    	 }

	    	 int i,flag;
	        	  for(i=index+1; ;i++){
	        		  if(i==MAX){
	        			  i=0;
	        		  }
	        		  if(i==index){
	        			  flag=0;
	        			  break;
	        		  }
	        		  if((h_table[i].keyword).length()==0){
	        			  flag=1;
	        			  break;
	        		  }
	        	  }
	        	  if(flag==1){
	        		  h_table[i].keyword=key;
	        		  h_table[i].meaning=mean;
	        	  }
	        	  else{
	        		  cout<<endl;
	        		  cout<<"HASH TABLE FULL!!"<<endl;
	        	  }


	 }
}

void Table::display_Table(){
	cout<<"Index \t Key \t Value"<<endl;
	for(int i=0;i<MAX;i++){
		if((table[i].name).length()!=0){
			cout<<i<<"\t"<<table[i].name<<"\t"<<table[i].attribute<<"\t"<<table[i].chain<<endl;
		}

}
}

int main() {
	string key,attribute;
	Table obj;
	int ch;
    for(; ;){
	                      cout<<"1.Without Replacement"<<endl;
					        cout<<"Enter the Word (Key)"<<endl;
				            cin>>key;
				            cout<<"Enter the attribute (Value)"<<endl;
				            cin>>attribute;
					            obj.insert_withoutreplacement(key,attribute);
					            obj.display_Table();
					            cin>>ch;
					            if(ch==0)
					            	break;
}
}
